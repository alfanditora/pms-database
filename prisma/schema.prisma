// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  department_id Int      @id @default(autoincrement())
  name          String
  division      String
  users         User[]
}

model User {
  npk          String   @id
  name         String
  password     String
  section      String
  position     String
  grade        Int
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [department_id])
  ipps         Ipp[]
}

model Category {
  category_id Int    @id @default(autoincrement())
  name        String // previously was enum category_name { PROJECT_BASED, ROUTINE_BASED, MIDDLE }
  routine     Float    // percentage 
  non_routine Float    // percentage 
  project     Float    // percentage 
  ipps        Ipp[]
} // so the total percentage must be 100

model Ipp {
  id         Int      @id @default(autoincrement())
  ipp        String   @unique      
  year       Int
  npk        String
  user       User     @relation(fields: [npk], references: [npk])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [category_id])
  uploaded_at DateTime @default(now())
  approval approval_status @default(PENDING)
  activities Activity[]
}

model Activity {
  id               Int      @id @default(autoincrement())
  activity         String   @unique 
  activity_category activity_category_enum
  activity_name    String
  kpi              String
  weight           Float
  target           String
  deliverable      String
  ippId            String
  ipp              Ipp @relation(fields: [ippId], references: [ipp])
  achievements     ActivityAchievement[]
}

model ActivityAchievement {
  achievement_id    Int        @id @default(autoincrement())
  month             Int
  status            status_enum
  achievement_value Int
  activityId        String
  activity          Activity   @relation(fields: [activityId], references: [activity])
  evidences         AchievementEvidence[]
  approval approval_status @default(PENDING)
}

model AchievementEvidence {
  evidence_id   Int                  @id @default(autoincrement())
  file_path     String
  uploaded_at   DateTime @default(now())
  achievementId Int
  achievement   ActivityAchievement @relation(fields: [achievementId], references: [achievement_id])
}

enum approval_status {
  PENDING
  APPROVED
  REJECTED
}

enum status_enum {
  COUNT
  NOT_COUNT
}

enum activity_category_enum {
  ROUTINE
  NON_ROUTINE
  PROJECT
}